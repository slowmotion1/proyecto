/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
	     return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
// clasess
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature feature;

nonterminal Formals formal_list;
nonterminal Formal formal;

nonterminal Expression expr;
nonterminal Expressions exprlst;
nonterminal Expressions exprblock;
nonterminal Expression let_list;
nonterminal Cases case_list;
nonterminal Case cases;


/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc EQ, LT, LE;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left DOT;
precedence left AT;

program
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
  | error
		{: RESULT = new Classes(curr_lineno()); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n,
		                   AbstractTable.idtable.addString("Object"),
				               f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
  |dummy_feature_list:fld
      {: RESULT = fld; :}
  |feature:c SEMI
      {:RESULT= (new Features(curr_lineno())).appendElement(c);:}
  |dummy_feature_list:p feature:s SEMI
      {:RESULT = p.appendElement(s);:}
  | error SEMI
		{: RESULT = new Features(curr_lineno()); :}
  ;

feature
  ::= OBJECTID:c COLON  TYPEID:s ASSIGN expr:ex
      {:RESULT= new attr(curr_lineno(),c,s,ex);:}
  |OBJECTID:c COLON  TYPEID:s
      {:RESULT = new attr(curr_lineno(),c,s,new no_expr(curr_lineno()));:}
  |OBJECTID:o LPAREN formal_list:flst RPAREN COLON TYPEID:t LBRACE expr:ex RBRACE
      {:RESULT = new method(curr_lineno(),o,flst,t,ex); :}
  |OBJECTID:o LPAREN RPAREN COLON TYPEID:t LBRACE expr:ex RBRACE
    {: RESULT = new method(curr_lineno(), o, new Formals(curr_lineno()),t,ex); :}
  | error expr:ex RBRACE
    {: RESULT = new method(curr_lineno(),
                           AbstractTable.idtable.addString("object"),
                           new Formals(curr_lineno()),
                           AbstractTable.idtable.addString("Object"),
                           ex); :}
  | error expr:ex
           {: RESULT = new attr(curr_lineno(),
                                AbstractTable.idtable.addString("object"),
                                AbstractTable.idtable.addString("Object"),
                                ex); :}
  | error
      {: RESULT = new attr(curr_lineno(),
                           AbstractTable.idtable.addString("object"),
                           AbstractTable.idtable.addString("Object"),
                           new no_expr(curr_lineno())); :}
  ;


  formal_list
 ::=
    {: RESULT = new Formals(curr_lineno()); :}
  | formal:f
    {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
  | formal_list:fl COMMA formal:f
    {: RESULT = fl.appendElement(f); :}
  | error
		{: RESULT = new Formals(curr_lineno()); :}
	;

   formal
    ::= OBJECTID:n COLON TYPEID:m
      {: RESULT = new formalc(curr_lineno(),n,m);:}

;


expr
  ::=
   OBJECTID:c ASSIGN expr:ex
      {:RESULT = new assign(curr_lineno(),c,ex);:}
  |expr:ex DOT OBJECTID:oid LPAREN exprlst:ex1 RPAREN
      {:RESULT = new dispatch(curr_lineno(),ex,oid,ex1); :}
  |OBJECTID:oid LPAREN exprlst:exdip RPAREN
      {:RESULT = new dispatch(curr_lineno(),
                              new object(curr_lineno(),
                                AbstractTable.idtable.addString("self")),
                              oid,
                              exdip );  :}
  | expr:e AT TYPEID:t DOT OBJECTID:o LPAREN exprlst:el RPAREN
    {: RESULT = new static_dispatch(curr_lineno(), e, t, o, el); :}
  | IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
    {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
  | WHILE expr:e1 LOOP expr:e2 POOL
    {: RESULT = new loop(curr_lineno(), e1, e2); :}
  | WHILE expr LOOP expr LOOP error
    {: RESULT = new no_expr(curr_lineno()); :}
  |LBRACE exprblock:el RBRACE
    {:RESULT= new block(curr_lineno(), el);:}

  | LET OBJECTID:oid COLON TYPEID:tid IN expr:ex
    {: RESULT = new let(curr_lineno(), oid, tid, (new no_expr(curr_lineno())), ex); :}

  |LET OBJECTID:oid COLON TYPEID:tid ASSIGN expr:ex1 IN expr:ex2
    {:RESULT = new let(curr_lineno(),oid,tid,ex1,ex2); :}
  | LET error let_list:ll
            {: RESULT = ll; :}
  | LET OBJECTID:oid COLON TYPEID:tid ASSIGN expr:ex let_list:ll
  	{: RESULT = new let(curr_lineno(), oid, tid, ex, ll); :}

  | LET OBJECTID:oid COLON TYPEID:tid let_list:ll
  	{: RESULT = new let(curr_lineno(), oid, tid, (new no_expr(curr_lineno())),ll); :}

  | CASE expr:ex OF case_list:cl ESAC
    {: RESULT = new typcase(curr_lineno(), ex, cl); :}
  |NEW TYPEID:c
      {:RESULT = new new_(curr_lineno(),c); :}
  | ISVOID expr:e
    {: RESULT = new isvoid(curr_lineno(), e); :}
  | expr:e1 PLUS expr:e2
    {: RESULT = new plus(curr_lineno(), e1, e2); :}
  | expr:e1 MINUS expr:e2
    {: RESULT = new sub(curr_lineno(), e1, e2); :}
  | expr:e1 MULT expr:e2
    {: RESULT = new mul(curr_lineno(), e1, e2); :}
  | expr:e1 DIV expr:e2
    {: RESULT = new divide(curr_lineno(), e1, e2); :}
  | NEG expr:e
    {: RESULT = new neg(curr_lineno(), e); :}
  | expr:e1 LT expr:e2
    {: RESULT = new lt(curr_lineno(), e1, e2); :}
  | expr:e1 LE expr:e2
    {: RESULT = new leq(curr_lineno(), e1, e2); :}
  | expr:e1 EQ expr:e2
    {: RESULT = new eq(curr_lineno(), e1, e2); :}
  | NOT expr:e
    {: RESULT = new comp(curr_lineno(), e); :}
  | LPAREN expr:e RPAREN
    {: RESULT = e; :}
  | OBJECTID:o
    {: RESULT = new object(curr_lineno(), o); :}
  | INT_CONST:i
    {: RESULT = new int_const(curr_lineno(), i); :}
  | STR_CONST:s
    {: RESULT = new string_const(curr_lineno(), s); :}
  | BOOL_CONST:b
    {: RESULT = new bool_const(curr_lineno(), b); :}
  | error
		{: RESULT = new no_expr(curr_lineno()); :}
    ;


//block
exprlst
  ::= /* empty */
    {: RESULT = new Expressions(curr_lineno()); :}
  |expr:e
    {:RESULT= (new Expressions(curr_lineno())).appendElement(e);:}
  | exprlst:exl COMMA expr:ex
    {:RESULT= exl.appendElement(ex);:}
  | error
    {: RESULT = new Expressions(curr_lineno()); :}
  ;

exprblock
  ::= expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| exprblock:eb expr:e SEMI
		{: RESULT = eb.appendElement(e); :}
  | exprblock:eb error SEMI
    {: RESULT = eb; :}
  | error SEMI
    {: RESULT = new Expressions(curr_lineno()); :}
  | error
    {: RESULT = new Expressions(curr_lineno()); :}
  ;

let_list
    ::= COMMA OBJECTID:o COLON TYPEID:t let_list:ll
      {: RESULT = new let(curr_lineno(), o, t,(new no_expr(curr_lineno())), ll); :}
    | COMMA OBJECTID:o COLON TYPEID:t IN expr:e
      {: RESULT = new let(curr_lineno(), o, t,
                (new no_expr(curr_lineno())), e); :}
    | COMMA OBJECTID:o COLON TYPEID:t ASSIGN expr:e let_list:ll
      {: RESULT = new let(curr_lineno(), o, t, e, ll); :}
    | COMMA OBJECTID:o COLON TYPEID:t ASSIGN expr:e1 IN expr:e2
      {: RESULT = new let(curr_lineno(), o, t, e1, e2); :}
    ;

case_list
  ::= cases:c SEMI
    {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
  | case_list:cl cases:c SEMI
    {: RESULT = cl.appendElement(c); :}
  ;

  cases
  ::=
   OBJECTID:o COLON TYPEID:t DARROW expr:e
    {: RESULT = new branch(curr_lineno(), o, t, e); :}
  ;
